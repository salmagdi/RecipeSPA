@page
@model IndexModel
@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Antiforgery
@{
	ViewData["Title"] = "Yumyums";
	var requestToken = Antiforgery.GetAndStoreTokens(HttpContext).RequestToken;
}

@* Recipes Tab *@
<div x-show="tab == 'recipes'">
	<div class="container d-flex justify-content-between align-items-center my-4">
		<h2>All Recipes</h2>
		<button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createRecipeModal">
			Add a Recipe
		</button>
	</div>

	@* Recipe Cards *@
	<div x-data="{recipes: []}"
		 x-effect="recipes = await $store.recipes;"
		 x-cloak
		 class="row row-cols-1 row-cols-xl-2 g-4 pb-5">
		<template x-for="recipe in recipes">
			<div class="col">
				<div class="card">
					<div class="card-body">

						<h5 class="card-title text-center" x-text="recipe.title"></h5>

						<div class="text-center mt-3">
							<div class="btn-group">
								<button class="btn btn-primary" data-bs-toggle="modal" :data-bs-target="'#editRecipeModal' + recipe.id">
									<i class="bi bi-pencil-square"></i>
								</button>
								<button class="btn btn-danger" data-bs-toggle="modal" :data-bs-target="'#DeleteModal' + recipe.id">
									<i class="bi bi-trash"></i>
								</button>
							</div>
						</div>

						@* Delete Modal *@
						<div class="modal fade" :id=" 'DeleteModal'+recipe.id " tabindex="-1">
							<div class="modal-dialog">
								<div class="modal-content text-center">
									<form x-on:submit.prevent="await deleteRecipe(recipe); $store.recipes = await getRecipes();">
										<div class="modal-header">
											<h5 class="modal-title">Are you sure you want to delete this recipe?</h5>
											<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
										</div>
										<div class="modal-body">
											<dl class="row">
												<dt>
													Title
												</dt>
												<dd x-html="recipe.title">
												</dd>
											</dl>
										</div>
										<div class="modal-footer">
											<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
											<button type="submit" class="btn btn-danger" data-bs-dismiss="modal">Delete Recipe</button>
										</div>
									</form>
								</div>
							</div>
						</div>

						@* Edit Recipe Modal *@
						<div class="modal fade" :id="'editRecipeModal'+recipe.id" tabindex="-1">
							<div class="modal-dialog modal-lg">
								<div class="modal-content">
									<form x-on:submit.prevent="await putRecipe(formatRecipe(recipe)); $store.recipes = await getRecipes();"
										  x-data="{recipe: {id: recipe.id, title: recipe.title, ingredients: recipe.ingredients.join('\n'), instructions: recipe.instructions.join('\n'), categories: recipe.categories}, availablecategories: []}"
										  x-effect="availablecategories = await $store.categories; ">
										<div class="modal-header">
											<h5 class="modal-title">Recipe Details</h5>
											<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
										</div>
										<div class="modal-body">

											<div class="my-3 row">
												<label for="editRecipeTitle" class="col-2 col-form-label">Title</label>
												<div class="col-7">
													<input id="editRecipeTitle" x-model="recipe.title" class="form-control" required />
												</div>
											</div>

											<div class="my-3 row">
												<label for="editRecipeIngredients" class="col-form-label col-2">Ingredients</label>
												<div class="col-7">
													<textarea class="form-control" x-model="recipe.ingredients" id="editRecipeIngredients" rows="5" placeholder="enter every ingredient on a separate line"></textarea>
												</div>
											</div>

											<div class="my-3 row">
												<label for="editRecipeInstructions" class="col-form-label col-2">Instructions</label>
												<div class="col-7">
													<textarea class="form-control" x-model="recipe.instructions" id="editRecipeInstructions" rows="5" placeholder="enter every instruction on a separate line"></textarea>
												</div>
											</div>

											<div class="my-3 row">
												<label for="editRecipeCategories" class="col-form-label col-2 ">Categories</label>
												<div class="col-7">
													<template x-for="category in availablecategories">
														<div>
															<input :id="'category'+ category + recipe.id" type="checkbox" :value="category" x-model="recipe.categories">
															<label :for="'category'+ category + recipe.id" x-text="category"></label>
															<br />
														</div>
													</template>
												</div>
											</div>
										</div>
										<div class="modal-footer">
											<button type="submit" class="btn btn-primary">
												edit recipe
											</button>
										</div>
									</form>
								</div>
							</div>
						</div>

					</div>
				</div>
			</div>
		</template>
	</div>
</div>

<div>
	@* Add Recipe Modal *@
<div class="modal fade" id="createRecipeModal" tabindex="-1" aria-labelledby="createRecipeModalLabel" aria-hidden="true">
	<div class="modal-dialog modal-lg">
		<div class="modal-content">
			<form x-on:submit.prevent="await postRecipe(formatRecipe(recipe)); $el.reset(); await updateDB();"
				  x-data="{recipe: {title: '', ingredients: '', instructions: '', categories:[]}, availablecategories: ''}"
				  x-effect="availablecategories = await $store.categories">
				<div class="modal-header">
					<h5 class="modal-title" id="createRecipeModalLabel">What is the recipe like?</h5>
					<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
				</div>
				<div class="modal-body">

					<div class="my-3 row">
						<label for="createRecipeTitle" class="col-2 col-form-label">Title</label>
						<div class="col-7">
							<input id="createRecipeTitle" x-model="recipe.title" class="form-control" required />
						</div>
					</div>

					<div class="my-3 row">
						<label for="createRecipeIngredients" class="col-form-label col-2">Ingredients</label>
						<div class="col-7">
							<textarea class="form-control" x-model="recipe.ingredients" id="createRecipeIngredients" rows="5" placeholder="enter every ingredient on a separate line"></textarea>
						</div>
					</div>

					<div class="my-3 row">
						<label for="createRecipeInstructions" class="col-form-label col-2">Instructions</label>
						<div class="col-7">
							<textarea class="form-control" x-model="recipe.instructions" id="createRecipeInstructions" rows="5" placeholder="enter every instruction on a separate line"></textarea>
						</div>
					</div>

					<div class="my-3 row">
						<label for="createRecipeCategories" class="col-form-label col-2 ">Categories</label>
						<div class="col-7">
							<template x-for="category in availablecategories">
								<div>
									<input :id="'category'+ category + recipe.id" type="checkbox" :value="category" x-model="recipe.categories">
									<label :for="'category'+ category + recipe.id" x-text="category"></label>
									<br />
								</div>
							</template>
						</div>
					</div>
				</div>
				<div class="modal-footer">
					<button type="submit" class="btn btn-primary">
						Create recipe
					</button>
				</div>
			</form>
		</div>
	</div>
</div>


@* Category Tab *@
<div x-show="tab=='categories'">
	<div class="container d-flex justify-content-between align-items-center my-4">
		<h2>All Categories</h2>
		<button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createCategoryModal">
			Add a Category
		</button>
	</div>

	@* Category Cards *@
	<div class="row row-cols-auto justify-content-center g-4 mx-5"
		 x-data="{ categories: []}"
		 x-effect="categories = await $store.categories;"
		 x-cloak>

		<template x-for="category in categories">
			<div class="col">
				<div class="card text-center">
					<div class="card-body">
						<h5 class="card-title" x-text="category"></h5>
						<div class="btn-group">
							<button class="btn btn-primary" data-bs-toggle="modal" :data-bs-target="'#editCategoryModal' + category.replace(/\s/g, '');">
								<i class="bi bi-pencil-square"></i>
							</button>
							<button class="btn btn-danger" data-bs-toggle="modal" :data-bs-target="'#deleteCategoryModal' + category.replace(/\s/g, '');">
								<i class="bi bi-trash"></i>
							</button>
						</div>
					</div>

					
				</div>
			</div>
		</template>

	</div>
</div>


<script type="text/javascript">
	document.addEventListener('alpine:init', () => {
		Alpine.store('recipes', getRecipes());
		Alpine.store('categories', getCategories());
	});

	const baseUrl = '@Configuration["BaseUrl"]';

	async function updateDB() {
		Alpine.store('recipes', getRecipes());
		Alpine.store('categories', getCategories());
	}

	async function getRecipes() {
		return fetch(new URL('/recipes', baseUrl).toString(), {
			headers: {
				'Content-Type': 'application/json',
				'RequestVerificationToken':
					'@requestToken'
			}
		}).then(response => response.json());
	}

	async function getCategories() {
		return fetch(new URL('/category', baseUrl).toString(), {
			headers: {
				'Content-Type': 'application/json',
				'RequestVerificationToken':
					'@requestToken'
			}
		}).then(response => response.json());
	}

	function formatRecipe(recipe) {
		return {
			id: recipe.id,
			title: recipe.title,
			ingredients: recipe.ingredients.split('\n'),
			instructions: recipe.instructions.split('\n'),
			categories: recipe.categories
		};
	}

	async function postRecipe(recipe) {
		let response = await fetch(new URL('/recipes', baseUrl).toString(), {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json',
				'RequestVerificationToken':
					'@requestToken'
			},
			body: JSON.stringify(recipe)
		});

		if (response.ok) {
			Swal.fire({
				text: `Successfully created recipe ${recipe.title}`,
				toast: true,
				position: 'top-end',
				showConfirmButton: false,
				icon: 'success',
				timer: 1700
			});
		}
		else {
			Swal.fire({
				text: `Failed to create recipe ${recipe.title}`,
				toast: true,
				position: 'top-end',
				showConfirmButton: false,
				icon: 'error',
				timer: 1700
			});
		}
	}

	async function putRecipe(recipe) {
		let response = await fetch(new URL(`/recipes/${recipe.id}`, baseUrl).toString(), {
			method: 'PUT',
			headers: {
				'Content-Type': 'application/json',
				'RequestVerificationToken':
					'@requestToken'
			},
			body: JSON.stringify(recipe)
		});

		if (response.ok) {
			Swal.fire({
				text: `Successfully edited recipe ${recipe.title}`,
				toast: true,
				position: 'top-end',
				showConfirmButton: false,
				icon: 'success',
				timer: 1700
			});
		}
		else {
			Swal.fire({
				text: `Failed to edit recipe ${recipe.title}`,
				toast: true,
				position: 'top-end',
				showConfirmButton: false,
				icon: 'error',
				timer: 1700
			});
		}
	}

	async function deleteRecipe(recipe) {
		let response = await fetch(new URL(`/recipes/${recipe.id}`, baseUrl).toString(), {
			method: 'DELETE',
			headers: {
				'Content-Type': 'application/json',
				'RequestVerificationToken':
					'@requestToken'
			}
		});

		if (response.ok) {
			Swal.fire({
				text: `Successfully deleted recipe ${recipe.title}`,
				toast: true,
				position: 'top-end',
				showConfirmButton: false,
				icon: 'success',
				timer: 1700
			});
		}
		else {
			Swal.fire({
				text: `Failed to delete recipe ${recipe.title}`,
				toast: true,
				position: 'top-end',
				showConfirmButton: false,
				icon: 'error',
				timer: 1700
			});
		}
	}

	
</script>