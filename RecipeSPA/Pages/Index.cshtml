
@page
@model IndexModel
@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration
@{
	ViewData["Title"] = "A Winning Dish";
}
@* Recipes Tab *@
<div x-show="tab == 'recipes'">
	<div class="container d-flex justify-content-between align-items-center my-4">
		<h2 class="c-font">All Recipes</h2>
		<button type="button" class="btn c-Add-button"  data-bs-toggle="modal" data-bs-target="#createModal">
			Add a Recipe
			  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" style="color:white" class="bi bi-plus-square" viewBox="0 0 16 16">
                    <path d="M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h12zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z" />
                    <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
               </svg>
		</button>
	</div>
	<div x-data="{recipes: []}"
		 x-effect="recipes = await $store.recipes;"
		 x-cloak>
		<template x-for="recipe in recipes">
	        <div class="c-category-row my-4 mx-5">
			    <div class="c-category-text-div  ">
			       <h5 class="c-category-text " x-text="recipe.title"></h5>
	   		    </div>
		          <div>
				<button class="btn c-category-edit-div" data-bs-toggle="modal" :data-bs-target="'#editModal' + recipe.id">
					 <svg xmlns="http://www.w3.org/2000/svg" width="25" height="25" fill="currentColor" class="bi bi-pencil-square" viewBox="0 0 16 16">
					      <path d="M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z" />
						<path fill-rule="evenodd" d="M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5v11z" />
					 </svg>
				</button>
                      </div>
			    <div>
				<button class="btn c-category-remove-div" data-bs-toggle="modal" :data-bs-target="'#deleteModal' + recipe.id">
					<svg xmlns="http://www.w3.org/2000/svg" width="25" height="25" fill="currentColor" class="bi bi-trash-fill" viewBox="0 0 16 16">
					     <path d="M2.5 1a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1H3v9a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V4h.5a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H10a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1H2.5zm3 4a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 .5-.5zM8 5a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7A.5.5 0 0 1 8 5zm3 .5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 1 0z" />
					</svg>
				</button>
		          </div>
		</div>
		@*Edit Recipe*@
		<div class="modal fade" id="'editModal'+recipe.id" tabindex="-1">
			<div class="modal-header">
				<h5 class="modal-title" id="editModalLabel">Edit Recipe</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<form x-on:submit="await putRecipe(formatRecipe(recipe)); $store.recipes = await getRecipes();"
				  x-data="{recipe: {id: recipe.id, title: recipe.title, ingredients: recipe.ingredients.join('\n'), instructions: recipe.instructions.join('\n'), categories: recipe.categories}, availablecategories: []}"
				  x-effect="availablecategories = await $store.categories; ">
				  <div class="modal-body c-edit-modal-body">
					  <div class="form-group">
						  <label for="editRecipeTitle" class="mb-2">Title</label>
						  <div class="col-3">
								<input id="editRecipeTitle" x-model="recipe.title" class="form-control" required />
						  </div>
					  </div>
					  <div class="form-group">
						  <label for="editRecipIng" class="mb-2">Ingredients/label>
						  <div class="col-5">
								<textarea class="form-control" x-model="recipe.ingredients" id="editRecipeIng" rows="5" placeholder="Enter each Ingredient on a separate line"></textarea>
						  </div>
					  </div>
					   <div class="form-group">
						  <label for="editRecipIns" class="mb-2">Ingredients/label>
						  <div class="col-5">
								<textarea class="form-control" x-model="recipe.instructions" id="editRecipeIns" rows="5" placeholder="Enter each Instruction on a separate line"></textarea>
						  </div>
					  </div>
					  <div class="form-group">
						  <label for="editRecipCat" class="mb-2">Categories/label>
						  <div class="col-5">
								<template x-for="category in availablecategories">
									<div>
										<input :id="'category'+ category + recipe.id" type="checkbox" :value="category" x-model="recipe.categories">
										<label :for="'category'+ category + recipe.id" x-text="category"></label>
										<br />
									</div>
								</template>
						  </div>
					  </div>
				  </div>
				  <div class="modal-footer c-modal-footer">
					  <button type="button" class="btn c-cancel-button" data-bs-dismiss="modal" aria-label="Close"></button>
					   <button type="submit" class="btn c-confirm-button">Confirm</button>
				   </div>
			</form>
		</div>
		</template>
	</div>
</div>
@*Add Modal*@
<div class="modal fade" id="'createModal'+recipe.id" tabindex="-1">
			<div class="modal-header">
				<h5 class="modal-title" id="createModalLabel">Add a Recipe</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<form x-on:submit="await postRecipe(formatRecipe(recipe)); $el.reset(); await updateDB();"
				  x-data="{recipe: {title: '', ingredients: '', instructions: '', categories:[]}, availablecategories: ''}"
				  x-effect="availablecategories = await $store.categories">
				  <div class="modal-body c-edit-modal-body">
					  <div class="form-group">
						  <label for="createRecipeTitle" class="mb-2">Title</label>
						  <div class="col-3">
								<input id="createRecipeTitle" x-model="recipe.title" class="form-control" required />
						  </div>
					  </div>
					  <div class="form-group">
						  <label for="createRecipIng" class="mb-2">Ingredients/label>
						  <div class="col-5">
								<textarea class="form-control" x-model="recipe.ingredients" id="createtRecipeIng" rows="5" placeholder="Enter each Ingredient on a separate line"></textarea>
						  </div>
					  </div>
					   <div class="form-group">
						  <label for="createRecipIns" class="mb-2">Ingredients/label>
						  <div class="col-5">
								<textarea class="form-control" x-model="recipe.instructions" id="createRecipeIns" rows="5" placeholder="Enter each Instruction on a separate line"></textarea>
						  </div>
					  </div>
					  <div class="form-group">
						  <label for="createRecipCat" class="mb-2">Categories/label>
						  <div class="col-5">
								<template x-for="category in availablecategories">
									<div>
										<input :id="'category'+ category + recipe.id" type="checkbox" :value="category" x-model="recipe.categories">
										<label :for="'category'+ category + recipe.id" x-text="category"></label>
										<br />
									</div>
								</template>
						  </div>
					  </div>
				  </div>
				  <div class="modal-footer c-modal-footer">
					  <button type="button" class="btn c-cancel-button" data-bs-dismiss="modal" aria-label="Close"></button>
					   <button type="submit" class="btn c-confirm-button">Confirm</button>
				   </div>
			</form>
		</div>


<script type="text/javascript">
	document.addEventListener('alpine:init', () => {
		Alpine.store('recipes', getRecipes());
		Alpine.store('categories', getCategories());
	});
	const baseUrl = '@Configuration["BaseUrl"]';
	async function updateDB() {
		Alpine.store('recipes', getRecipes());
		Alpine.store('categories', getCategories());
	}
	async function getRecipes() {
		return fetch(new URL('/recipes', baseUrl).toString(), {
			headers: {
				'Content-Type': 'application/json',
			}
		}).then(response => response.json());
	}
	function formatRecipe(recipe) {
		return {
			id: recipe.id,
			title: recipe.title,
			ingredients: recipe.ingredients.split('\n'),
			instructions: recipe.instructions.split('\n'),
			categories: recipe.categories
		};
	}
	async function postRecipe(recipe) {
		let response = await fetch(new URL('/recipes', baseUrl).toString(), {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json',
			},
			body: JSON.stringify(recipe)
		});
		if (response.ok) {
			Swal.fire({
				text: `Successfully created recipe ${recipe.title}`,
				toast: true,
				position: 'top-end',
				showConfirmButton: false,
				icon: 'success',
				timer: 1700
			});
		}
		else {
			Swal.fire({
				text: `Failed to create recipe ${recipe.title}`,
				toast: true,
				position: 'top-end',
				showConfirmButton: false,
				icon: 'error',
				timer: 1700
			});
		}
	}
		async function putRecipe(recipe) {
		let response = await fetch(new URL(`/recipes/${recipe.id}`, baseUrl).toString(), {
			method: 'PUT',
			headers: {
				'Content-Type': 'application/json',
			},
			body: JSON.stringify(recipe)
		});
		if (response.ok) {
			Swal.fire({
				text: `Successfully edited recipe ${recipe.title}`,
				toast: true,
				position: 'top-end',
				showConfirmButton: false,
				icon: 'success',
				timer: 1700
			});
		}
		else {
			Swal.fire({
				text: `Failed to edit recipe ${recipe.title}`,
				toast: true,
				position: 'top-end',
				showConfirmButton: false,
				icon: 'error',
				timer: 1700
			});
		}
	}
	async function deleteRecipe(recipe) {
		let response = await fetch(new URL(`/recipes/${recipe.id}`, baseUrl).toString(), {
			method: 'DELETE',
			headers: {
				'Content-Type': 'application/json',
			}
		});
		if (response.ok) {
			Swal.fire({
				text: `Successfully deleted recipe ${recipe.title}`,
				toast: true,
				position: 'top-end',
				showConfirmButton: false,
				icon: 'success',
				timer: 1700
			});
		}
		else {
			Swal.fire({
				text: `Failed to delete recipe ${recipe.title}`,
				toast: true,
				position: 'top-end',
				showConfirmButton: false,
				icon: 'error',
				timer: 1700
			});
		}
	}
	</Script>